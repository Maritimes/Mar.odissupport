}
checkAndCompareTSN<-function(crapStrings=crapstrings, definitive=definitive, df=NULL, searchtype = NULL){
print(paste("...Checking ritis using ",searchtype," names"))
no_TSN = definitive[definitive$TSN_Definitive %in% c(NA, FALSE),]
if (nrow(no_TSN)>0) {
no_TSN = as.data.frame(t(sapply_pb(no_TSN[,"SPEC"],chk_ritis, crapStrings = crapStrings, searchtype=searchtype)))
browser()
names(no_TSN) = c("SEARCHTERM","ID_ritis","MATCH_ritis")
definitive = assignDefinitive(definitive,no_TSN, searchtype)
}
return(definitive)
}
definitive = assignDefinitive(definitive,no_TSN, searchtype)
searchtype
searchtypeVal = "scientific name"
colname = "SPEC"
colnames(results)
theID = "TSN"
theIDComment = "TSN_src"
theIDUsed = "TSN_data"
defTableName = "definitive_TSN"
isDefFlag = "TSN_Definitive"
otherTheID = "AphiaID"
otherTheIDComment = "AphiaID_src"
otherTheIDUsed = "AphiaID_data"
otherDefTableName = "definitive_Aphia"
otherIsDefFlag = "AphiaID_Definitive"
results_ID = "ID_ritis"
results_MATCH = "MATCH_ritis"
results_type = "ritis"
excludes <- c(theID,theIDComment,theIDUsed,isDefFlag)
keeperStrings = c("single match","only accepted")
results[theID] = NA
results[theIDUsed] = NA
results[theIDComment] = NA
results[isDefFlag]=NA
nrow(results[!is.na(results[,results_ID]),])>0
results[!is.na(results[,results_ID]),theIDUsed]<-searchtypeVal
results[!is.na(results[,results_ID]),theIDComment]<-results_type
results[!is.na(results[,results_ID]) & grepl(paste(keeperStrings,collapse="|"),results[,results_MATCH]),isDefFlag]<-TRUE
results[!is.na(results[,results_ID]) & !(results[,isDefFlag] %in% TRUE),isDefFlag]   <-FALSE
results[!is.na(results[,results_ID]),][theID] <- results[!is.na(results[,results_ID]),][results_ID]
results <-results[,c("SEARCHTERM",theID,theIDComment,theIDUsed, isDefFlag)]
names(results)[names(results) == 'SEARCHTERM'] <- colname
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=theID)
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=theID)
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind[,'thisID'] <- newFind[paste0(theID,".y")]
nrow(replacers)>0
curDefinitive[curDefinitive[,theID] %in% replacers[,theID],c(theIDComment,theIDUsed, isDefFlag)]<-
replacers[c(theIDComment,theIDUsed,isDefFlag)]
nrow(doubleblind)>0
i=1
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],][i,theIDComment]<-
paste("Both",curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],theIDComment][i], "&",doubleblind[i,theIDComment])
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],isDefFlag]<-TRUE
nrow(newFind)>0
curDefinitive[curDefinitive[,isDefFlag] %in% NA & curDefinitive[,colname] %in% newFind[,colname],][,c(theID,theIDComment,theIDUsed, isDefFlag)]<-
newFind[,c("thisID",theIDComment,theIDUsed, isDefFlag)]
curDefinitive
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
assignDefinitive<-function(curDefinitive, results = NULL, searchtype = NULL){
if (searchtype =="scientific"){
searchtypeVal = "scientific name"
colname = "SPEC"
}else{
searchtypeVal = "common name"
colname = "COMM"
}
if(any(grep("taxize",colnames(results))) |(any(grep("worrms",colnames(results))) )){
theID = "AphiaID"
theIDComment = "AphiaID_src"
theIDUsed = "AphiaID_data"
defTableName = "definitive_Aphia"
isDefFlag = "AphiaID_Definitive"
otherTheID = "TSN"
otherTheIDComment = "TSN_src"
otherTheIDUsed = "TSN_data"
otherDefTableName = "definitive_TSN"
otherIsDefFlag = "TSN_Definitive"
if (any(grep("taxize",colnames(results)))){
results_ID = "ID_taxize"
results_MATCH = "MATCH_taxize"
results_type = "Taxize"
}else if (any(grep("worrms",colnames(results)))){
results_ID = "ID_worrms"
results_MATCH = "MATCH_worrms"
results_type = "Worrms"
}
}else if (any(grep("ritis",colnames(results)))){
theID = "TSN"
theIDComment = "TSN_src"
theIDUsed = "TSN_data"
defTableName = "definitive_TSN"
isDefFlag = "TSN_Definitive"
otherTheID = "AphiaID"
otherTheIDComment = "AphiaID_src"
otherTheIDUsed = "AphiaID_data"
otherDefTableName = "definitive_Aphia"
otherIsDefFlag = "AphiaID_Definitive"
results_ID = "ID_ritis"
results_MATCH = "MATCH_ritis"
results_type = "ritis"
}
excludes <- c(theID,theIDComment,theIDUsed,isDefFlag)
keeperStrings = c("single match","only accepted")
results[theID] = NA
results[theIDUsed] = NA
results[theIDComment] = NA
results[isDefFlag]=NA
if (nrow(results[!is.na(results[,results_ID]),])>0){
#for those which we have results - carry over the ID, the src and how it was found
results[!is.na(results[,results_ID]),theIDUsed]<-searchtypeVal
results[!is.na(results[,results_ID]),theIDComment]<-results_type
results[!is.na(results[,results_ID]) & grepl(paste(keeperStrings,collapse="|"),results[,results_MATCH]),isDefFlag]<-TRUE
results[!is.na(results[,results_ID]) & !(results[,isDefFlag] %in% TRUE),isDefFlag]   <-FALSE
results[!is.na(results[,results_ID]),][theID] <- results[!is.na(results[,results_ID]),][results_ID]
}
results <-results[,c("SEARCHTERM",theID,theIDComment,theIDUsed, isDefFlag)]
names(results)[names(results) == 'SEARCHTERM'] <- colname
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=theID)
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind[,'thisID'] <- newFind[paste0(theID,".y")]
#if the new codes are definitive, we will replace the existing (not-definitive) ones entirely
if (nrow(replacers)>0){
curDefinitive[curDefinitive[,theID] %in% replacers[,theID],c(theIDComment,theIDUsed, isDefFlag)]<-
replacers[c(theIDComment,theIDUsed,isDefFlag)]
browser()
}
#if we have already have a tentative code, and our new result set gives the same code,
#we will call it definitive
if (nrow(doubleblind)>0){
for (i in 1:nrow(doubleblind)){
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],][i,theIDComment]<-
paste("Both",curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],theIDComment][i], "&",doubleblind[i,theIDComment])  #c(theIDComment,theIDUsed)]<-NA
}
browser()
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],isDefFlag]<-TRUE
}
#just adding new stuff - we don't have anything yet
if (nrow(newFind)>0){
curDefinitive[curDefinitive[,isDefFlag] %in% NA & curDefinitive[,colname] %in% newFind[,colname],][,c(theID,theIDComment,theIDUsed, isDefFlag)]<-
newFind[,c("thisID",theIDComment,theIDUsed, isDefFlag)]
browser()
}
return(curDefinitive)
}
no_TSN
no_TSN
as.data.frame(t(sapply_pb(no_TSN[,"SPEC"],chk_ritis, crapStrings = crapStrings, searchtype=searchtype)))
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
test = getTaxaIDs(head(GSSPECIES,100), comm_col = "COMM", sci_col = "SPEC")
test = getTaxaIDs(head(GSSPECIES,3), comm_col = "COMM", sci_col = "SPEC")
no_TSN
no_TSN
no_TSN
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
test = getTaxaIDs(head(GSSPECIES,3), comm_col = "COMM", sci_col = "SPEC")
test = getTaxaIDs(head(GSSPECIES,200), comm_col = "COMM", sci_col = "SPEC")
colname
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
test = getTaxaIDs(head(GSSPECIES,600), comm_col = "COMM", sci_col = "SPEC")
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
test = getTaxaIDs(head(GSSPECIES,250), comm_col = "COMM", sci_col = "SPEC")
View(no_TSNKeep)
View(definitiveKeep)
names(no_TSNKeep) = c("SEARCHTERM","ID_ritis","MATCH_ritis")
test= assignDefinitive(definitiveKeep,no_TSNKeep, searchtype)
assignDefinitive<-function(curDefinitive, results = NULL, searchtype = NULL){
if (searchtype =="scientific"){
searchtypeVal = "scientific name"
colname = "SPEC"
}else{
searchtypeVal = "common name"
colname = "COMM"
}
if(any(grep("taxize",colnames(results))) |(any(grep("worrms",colnames(results))) )){
theID = "AphiaID"
theIDComment = "AphiaID_src"
theIDUsed = "AphiaID_data"
defTableName = "definitive_Aphia"
isDefFlag = "AphiaID_Definitive"
otherTheID = "TSN"
otherTheIDComment = "TSN_src"
otherTheIDUsed = "TSN_data"
otherDefTableName = "definitive_TSN"
otherIsDefFlag = "TSN_Definitive"
if (any(grep("taxize",colnames(results)))){
results_ID = "ID_taxize"
results_MATCH = "MATCH_taxize"
results_type = "Taxize"
}else if (any(grep("worrms",colnames(results)))){
results_ID = "ID_worrms"
results_MATCH = "MATCH_worrms"
results_type = "Worrms"
}
}else if (any(grep("ritis",colnames(results)))){
theID = "TSN"
theIDComment = "TSN_src"
theIDUsed = "TSN_data"
defTableName = "definitive_TSN"
isDefFlag = "TSN_Definitive"
otherTheID = "AphiaID"
otherTheIDComment = "AphiaID_src"
otherTheIDUsed = "AphiaID_data"
otherDefTableName = "definitive_Aphia"
otherIsDefFlag = "AphiaID_Definitive"
results_ID = "ID_ritis"
results_MATCH = "MATCH_ritis"
results_type = "ritis"
}
excludes <- c(theID,theIDComment,theIDUsed,isDefFlag)
keeperStrings = c("single match","only accepted")
results[theID] = NA
results[theIDUsed] = NA
results[theIDComment] = NA
results[isDefFlag]=NA
browser()
if (nrow(results[!is.na(results[,results_ID]),])>0){
#for those which we have results - carry over the ID, the src and how it was found
results[!is.na(results[,results_ID]),theIDUsed]<-searchtypeVal
results[!is.na(results[,results_ID]),theIDComment]<-results_type
results[!is.na(results[,results_ID]) & grepl(paste(keeperStrings,collapse="|"),results[,results_MATCH]),isDefFlag]<-TRUE
results[!is.na(results[,results_ID]) & !(results[,isDefFlag] %in% TRUE),isDefFlag]   <-FALSE
results[!is.na(results[,results_ID]),][theID] <- results[!is.na(results[,results_ID]),][results_ID]
}
results <-results[,c("SEARCHTERM",theID,theIDComment,theIDUsed, isDefFlag)]
names(results)[names(results) == 'SEARCHTERM'] <- colname
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=theID)
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind[,'thisID'] <- newFind[paste0(theID,".y")]
#if the new codes are definitive, we will replace the existing (not-definitive) ones entirely
if (nrow(replacers)>0){
curDefinitive[curDefinitive[,theID] %in% replacers[,theID],c(theIDComment,theIDUsed, isDefFlag)]<-
replacers[c(theIDComment,theIDUsed,isDefFlag)]
}
#if we have already have a tentative code, and our new result set gives the same code,
#we will call it definitive
if (nrow(doubleblind)>0){
for (i in 1:nrow(doubleblind)){
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],][i,theIDComment]<-
paste("Both",curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],theIDComment][i], "&",doubleblind[i,theIDComment])  #c(theIDComment,theIDUsed)]<-NA
}
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,theID] %in% doubleblind[,theID],isDefFlag]<-TRUE
}
#just adding new stuff - we don't have anything yet
if (nrow(newFind)>0){
curDefinitive[curDefinitive[,isDefFlag] %in% NA & curDefinitive[,colname] %in% newFind[,colname],][,c(theID,theIDComment,theIDUsed, isDefFlag)]<-
newFind[,c("thisID",theIDComment,theIDUsed, isDefFlag)]
}
return(curDefinitive)
}
test= assignDefinitive(definitiveKeep,no_TSNKeep, searchtype)
test= assignDefinitive(definitiveKeep,no_TSNKeep, "common")
results
results
results[!is.na(results[,results_ID]),theIDUsed]<-searchtypeVal
results[!is.na(results[,results_ID]),theIDComment]<-results_type
results[!is.na(results[,results_ID]) & grepl(paste(keeperStrings,collapse="|"),results[,results_MATCH]),isDefFlag]<-TRUE
results[!is.na(results[,results_ID]) & !(results[,isDefFlag] %in% TRUE),isDefFlag]   <-FALSE
results[!is.na(results[,results_ID]),][theID] <- results[!is.na(results[,results_ID]),][results_ID]
results
results <-results[,c("SEARCHTERM",theID,theIDComment,theIDUsed, isDefFlag)]
names(results)[names(results) == 'SEARCHTERM'] <- colname
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=theID)
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)]
results[results[,isDefFlag] %in% TRUE,]
curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),]
results[results[,isDefFlag] %in% TRUE,]
theID
colname
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=colname)
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=theID)
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=colname)
replacers
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=theID)
merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=colname)
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=colname)
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=colname)
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind[,'thisID'] <- newFind[paste0(theID,".y")]
replacers
replacers[paste0(theID,".y")]
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=colname)
replacers[,'thisID'] <- replacers[paste0(theID,".y")]
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=colname)
replacers[,'thisID'] <- replacers[paste0(theID,".y")]
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind[,'thisID'] <- newFind[paste0(theID,".y")]
replacers
curDefinitive[curDefinitive[,theID] %in% replacers[,theID],c(theIDComment,theIDUsed, isDefFlag)]<-
replacers[c(theIDComment,theIDUsed,isDefFlag)]
theID
curDefinitive[,"thisID"]
curDefinitive[curDefinitive[,colname] %in% replacers[,"thisID"],]
curDefinitive[,colname]
replacers
curDefinitive[curDefinitive[,colname] %in% replacers[,colname],]
replacers[c(theIDComment,theIDUsed,isDefFlag)]
curDefinitive[curDefinitive[,colname] %in% replacers[,colname],c(theIDComment,theIDUsed, isDefFlag)]<-
replacers[c(theIDComment,theIDUsed,isDefFlag)]
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=colname)
doubleblind[,'thisID'] <- doubleblind[paste0(theID,".y")]
doubleblind
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
assignDefinitive<-function(curDefinitive, results = NULL, searchtype = NULL){
if (searchtype =="scientific"){
searchtypeVal = "scientific name"
colname = "SPEC"
}else{
searchtypeVal = "common name"
colname = "COMM"
}
if(any(grep("taxize",colnames(results))) |(any(grep("worrms",colnames(results))) )){
theID = "AphiaID"
theIDComment = "AphiaID_src"
theIDUsed = "AphiaID_data"
defTableName = "definitive_Aphia"
isDefFlag = "AphiaID_Definitive"
otherTheID = "TSN"
otherTheIDComment = "TSN_src"
otherTheIDUsed = "TSN_data"
otherDefTableName = "definitive_TSN"
otherIsDefFlag = "TSN_Definitive"
if (any(grep("taxize",colnames(results)))){
results_ID = "ID_taxize"
results_MATCH = "MATCH_taxize"
results_type = "Taxize"
}else if (any(grep("worrms",colnames(results)))){
results_ID = "ID_worrms"
results_MATCH = "MATCH_worrms"
results_type = "Worrms"
}
}else if (any(grep("ritis",colnames(results)))){
theID = "TSN"
theIDComment = "TSN_src"
theIDUsed = "TSN_data"
defTableName = "definitive_TSN"
isDefFlag = "TSN_Definitive"
otherTheID = "AphiaID"
otherTheIDComment = "AphiaID_src"
otherTheIDUsed = "AphiaID_data"
otherDefTableName = "definitive_Aphia"
otherIsDefFlag = "AphiaID_Definitive"
results_ID = "ID_ritis"
results_MATCH = "MATCH_ritis"
results_type = "ritis"
}
excludes <- c(theID,theIDComment,theIDUsed,isDefFlag)
keeperStrings = c("single match","only accepted")
results[theID] = NA
results[theIDUsed] = NA
results[theIDComment] = NA
results[isDefFlag]=NA
browser()
if (nrow(results[!is.na(results[,results_ID]),])>0){
#for those which we have results - carry over the ID, the src and how it was found
results[!is.na(results[,results_ID]),theIDUsed]<-searchtypeVal
results[!is.na(results[,results_ID]),theIDComment]<-results_type
results[!is.na(results[,results_ID]) & grepl(paste(keeperStrings,collapse="|"),results[,results_MATCH]),isDefFlag]<-TRUE
results[!is.na(results[,results_ID]) & !(results[,isDefFlag] %in% TRUE),isDefFlag]   <-FALSE
results[!is.na(results[,results_ID]),][theID] <- results[!is.na(results[,results_ID]),][results_ID]
}
results <-results[,c("SEARCHTERM",theID,theIDComment,theIDUsed, isDefFlag)]
names(results)[names(results) == 'SEARCHTERM'] <- colname
multimatches =
replacers = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% TRUE,], by=colname)
replacers[,'thisID'] <- replacers[paste0(theID,".y")]
doubleblind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(FALSE)),][c(colname,theID)],
results[results[,isDefFlag] %in% FALSE,], by=colname)
doubleblind[,'thisID'] <- doubleblind[paste0(theID,".y")]
newFind = merge(curDefinitive[(curDefinitive[,isDefFlag] %in% c(NA)),][c(colname,theID)],
results[results[,isDefFlag] %in% c(TRUE,FALSE),], by=colname)
newFind[,'thisID'] <- newFind[paste0(theID,".y")]
#if the new codes are definitive, we will replace the existing (not-definitive) ones entirely
if (nrow(replacers)>0){
curDefinitive[curDefinitive[,colname] %in% replacers[,colname],c(theIDComment,theIDUsed, isDefFlag)]<-
replacers[c(theIDComment,theIDUsed,isDefFlag)]
}
#if we have already have a tentative code, and our new result set gives the same code,
#we will call it definitive
if (nrow(doubleblind)>0){
for (i in 1:nrow(doubleblind)){
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,colname] %in% doubleblind[,colname],][i,theIDComment]<-
paste("Both",curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,colname] %in% doubleblind[,colname],theIDComment][i], "&",doubleblind[i,theIDComment])  #c(theIDComment,theIDUsed)]<-NA
}
curDefinitive[curDefinitive[,isDefFlag] %in% FALSE & curDefinitive[,colname] %in% doubleblind[,colname],isDefFlag]<-TRUE
}
#just adding new stuff - we don't have anything yet
if (nrow(newFind)>0){
curDefinitive[curDefinitive[,isDefFlag] %in% NA & curDefinitive[,colname] %in% newFind[,colname],][,c(theID,theIDComment,theIDUsed, isDefFlag)]<-
newFind[,c("thisID",theIDComment,theIDUsed, isDefFlag)]
}
return(curDefinitive)
}
definitive = assignDefinitive(definitive,no_TSN, searchtype)
test= assignDefinitive(definitiveKeep,no_TSNKeep, "common")
test
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
test= assignDefinitive(definitiveKeep,no_TSNKeep, "common")
rm(assignDefinitive()
)
rm(assignDefinitive)
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
test = getTaxaIDs(head(GSSPECIES,250), comm_col = "COMM", sci_col = "SPEC")
test
View(test)
View(test)
View(test)
View(test)
rm(no_TSNKeep)
rm(definitiveKeep)
View(multi_Codes)
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
library(Mar.odissupport)
test = getTaxaIDs(head(GSSPECIES,20), comm_col = "COMM", sci_col = "SPEC")
test
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
test = getTaxaIDs(head(GSSPECIES,20), comm_col = "COMM", sci_col = "SPEC")
spec_list_orig
definitive
merge(spec_list_orig, definitive)
res = merge(spec_list_orig, definitive, by=c(sci_col,comm_col))
res
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
crapStrings1=NULL
c(crapStrings1, "\\(NS\\)", " SP\\.", "S\\.O\\.", "F\\.","UNIDENTIFIED", "EGGS","UNID\\.","\\(ORDER\\)","\\(SUBORDER\\)")
crapStrings1=c("pigs","donkey")
crapStrings <- c(crapStrings1, "\\(NS\\)", " SP\\.", "S\\.O\\.", "F\\.","UNIDENTIFIED", "EGGS","UNID\\.","\\(ORDER\\)","\\(SUBORDER\\)")
crapStrings
filterStrings=c("pigs","donkey")
filterStrings <- c(filterStrings, "\\(NS\\)", " SP\\.", "S\\.O\\.", "F\\.","UNIDENTIFIED", "EGGS","UNID\\.","\\(ORDER\\)","\\(SUBORDER\\)")
filterStrings
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R', echo=TRUE)
library(Mar.odissupport)
test = getTaxaIDs(head(GSSPECIES,20), comm_col = "COMM", sci_col = "SPEC")
source('/media/sf_git/Maritimes/Mar.odissupport/R/getTaxaIDs.R')
test = getTaxaIDs(head(GSSPECIES,20), comm_col = "COMM", sci_col = "SPEC")
test
testset = GSSPECIES[1:20]
GSSPECIES[,1:20]
GSSPECIES[1:20,]
testdata= GSSPECIES[50:60,c("SPEC","COMMON","CODE","NMFS")]
testdata= GSSPECIES[50:60,c("SPEC","COMM","CODE","NMFS")]
testdata
test = getTaxaIDs(testdata, comm_col = "COMM", sci_col = "SPEC")
test
testdata
test = getTaxaIDs(testdata, comm_col = "COMM", sci_col = "SPEC")
test
